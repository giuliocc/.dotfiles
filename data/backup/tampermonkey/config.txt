{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Disable YouTube 60 FPS (Force 30 FPS)","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["*://www.youtube.com/tv*","*://www.youtube.com/embed/*"],"orig_includes":[],"orig_matches":["*://www.youtube.com/*"],"orig_noframes":true,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1590618776104},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/23329-disable-youtube-60-fps-force-30-fps/code/Disable%20YouTube%2060%20FPS%20(Force%2030%20FPS).user.js","uuid":"bfdbb85f-4a27-4fe8-a744-041c004bab50","source":""},{"name":"Burlesco","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["gauchazh.clicrbs.com.br","static.infoglobo.com.br","cdn.tinypass.com"],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.bloomberg.com/*","*://correio.rac.com.br/*","*://*.nsctotal.com.br/*","*://www.economist.com/*","*://*.estadao.com.br/*","*://foreignpolicy.com/*","*://*.fivewall.com.br/*","*://*.folha.uol.com.br/*","*://*.folha.com.br/*","*://gauchazh.clicrbs.com.br/*","*://*.zh.clicrbs.com.br/*","*://api.clicrbs.com.br/*","*://*.gazetadopovo.com.br/*","*://ogjs.infoglobo.com.br/*","*://*.jota.info/*","*://www.jornalnh.com.br/*","*://www.netdeal.com.br/*","*://*.nytimes.com/*","*://*.nyt.com/*","*://*.oglobo.globo.com/*","*://www.rbsonline.com.br/*","*://api.tinypass.com/*","*://cdn.tinypass.com/*","*://dashboard.tinypass.com/*","*://*.washingtonpost.com/*","*://*.exame.com/*","*://www.eltiempo.com/*","*://super.abril.com.br/*","*://veja.abril.com.br/*","*://quatrorodas.abril.com.br/*","*://*.uol.com.br/*","*://www.uol/*","*://*.wsj.com/*","*://*.ft.com/*","*://*.gramophone.co.uk/*","*://*.folhadelondrina.com.br/*","*://*.wired.com/*","*://www.jornalvs.com.br/*","*://*.br18.com.br/*","*://*.diariopopular.com.br/*","*://*.haaretz.com/*","*://*.haaretz.co.il/*","*://*.diarinho.com.br/*","*://*.diariodaregiao.com.br/*","*://*.correio24horas.com.br/*","*://*.dgabc.com.br/*","*://crusoe.com.br/*","*://*.em.com.br/*","*://*.forbes.pl/*","*://*.newsweek.pl/*"],"orig_noframes":true,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1597191830320,"data":{}},"enabled":true,"position":2,"file_url":"https://burles.co/userscript/burlesco.user.js","uuid":"27edf00d-5ed2-4d7d-8f32-31d3ccff75f3","source":""}]}